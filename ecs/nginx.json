{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Small ECS cluster with nginx running on auto-scaling group with CloudWatch logging.",

  "Parameters": {
    "ClusterSize": {
      "Description": "Number of instances to run in the ECS cluster",
      "Type": "Number",
      "Default": "1",
      "MinValue": "0",
      "MaxValue": "10",
      "ConstraintDescription": "must lower than 10 (or, raise the limits in template)."
    },

    "ClusterInstanceType": {
      "Description": "ECS Cluster Instance Type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": ["t2.micro", "t2.small", "t2.medium", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge"],
      "ConstraintDescription": "must be a valid HVM instance type."
    },

    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    }
  },

  "Mappings": {
    "RegionToECSOptimizedAMI": {
      "us-east-1":      {"AMI": "ami-3d55272a"},
      "us-west-1":      {"AMI": "ami-444d0224"},
      "us-west-2":      {"AMI": "ami-1ccd1f7c"},
      "eu-west-1":      {"AMI": "ami-b6760fc5"},
      "eu-central-1":   {"AMI": "ami-f562909a"},
      "ap-northeast-1": {"AMI": "ami-096cba68"},
      "ap-souteast-1":  {"AMI": "ami-7934ee1a"},
      "ap-southeast-2": {"AMI": "ami-22a49541"}
    }
  },

  "Resources": {
    "NginxELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AvailabilityZones": {"Fn::GetAZs" : ""},
        "Listeners": [{
          "LoadBalancerPort": "80",
          "InstancePort": "80",
          "Protocol": "HTTP"
        }],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "10",
          "Target": "HTTP:80/",
          "Timeout": "5",
          "UnhealthyThreshold": "6"
        }
      }
    },

    "RedisELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AvailabilityZones": {"Fn::GetAZs" : ""},
        "SecurityGroups": [{"Fn::GetAtt": ["RedisELBSecurityGroup", "GroupId"]}],
        "Listeners": [{
          "LoadBalancerPort": "6379",
          "InstancePort": "6379",
          "Protocol": "TCP"
        }],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "10",
          "Target": "TCP:6379",
          "Timeout": "5",
          "UnhealthyThreshold": "6"
        }
      }
    },

    "RedisELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow Cluster access to Redis (purposefully open for easier bootstrap-use internal scheme for production).",
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "6379",
          "ToPort": "6379",
          "CidrIp": "0.0.0.0/0"
        }]
      }
    },

    "RedisSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow Cluster access to Redis",
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "6379",
          "ToPort": "6379",
          "SourceSecurityGroupOwnerId": {"Fn::GetAtt": ["RedisELB", "SourceSecurityGroup.OwnerAlias"]},
          "SourceSecurityGroupName": {"Fn::GetAtt" : ["RedisELB", "SourceSecurityGroup.GroupName"]}
        }]
      }
    },

    "ClusterSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow inbound access to Cluster (80, 22)",
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "SourceSecurityGroupOwnerId": {"Fn::GetAtt": ["NginxELB", "SourceSecurityGroup.OwnerAlias"]},
          "SourceSecurityGroupName": {"Fn::GetAtt" : ["NginxELB", "SourceSecurityGroup.GroupName"]}
        }, {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": "0.0.0.0/0"
        }]
      }
    },

    "ClusterAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {"AvailabilityZones": {"Fn::GetAZs": ""},
        "LaunchConfigurationName": {"Ref": "ClusterLaunchConfig"},
        "MinSize": "0",
        "MaxSize": "10",
        "DesiredCapacity": {"Ref": "ClusterSize"},
        "Tags": [{
          "Key": "Name",
          "Value": {"Fn::Join": ["", ["ECS - ", {"Ref": "AWS::StackName"}]]},
          "PropagateAtLaunch": true
        }]
      }
    },

    "ClusterLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {"Fn::FindInMap": ["RegionToECSOptimizedAMI", {"Ref": "AWS::Region"}, "AMI"]},
        "InstanceType": {"Ref": "ClusterInstanceType"},
        "IamInstanceProfile": "ecsInstanceRole",
        "KeyName": {"Ref": "KeyName"},
        "SecurityGroups": [{"Ref": "ClusterSecurityGroup"}, {"Ref": "RedisSecurityGroup"}],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\n",
                "MIME-Version: 1.0\n",
                "\n",
                "--==BOUNDARY==\n",
                "MIME-Version: 1.0\n",
                "Content-Type: text/text/x-shellscript; charset=\"us-ascii\"\n",
                "#!/bin/bash\n",
                "\n",
                "echo ECS_CLUSTER=", {"Ref": "Cluster"}, " >> /etc/ecs/ecs.config\n",
                "ECS_AVAILABLE_LOGGING_DRIVERS=[\"json-file\",\"awslogs\", \"journald\", \"syslog\"]\n",
                "\n",
                "# Install awslogs and the jq JSON parser\n",
                "yum install -y awslogs jq\n",
                "\n",
                "# Inject the CloudWatch Logs configuration file contents\n",
                "cat > /etc/awslogs/awslogs.conf <<- EOF\n",
                "[general]\n",
                "state_file = /var/lib/awslogs/agent-state        \n",
                " \n",
                "[/var/log/dmesg]\n",
                "file = /var/log/dmesg\n",
                "log_group_name = {cluster}\n",
                "log_stream_name = {container_instance_id}/var/log/dmesg\n",
                "\n",
                "[/var/log/messages]\n",
                "file = /var/log/messages\n",
                "log_group_name = {cluster}\n",
                "log_stream_name = {container_instance_id}/var/log/messages\n",
                "datetime_format = %b %d %H:%M:%S\n",
                "\n",
                "[/var/log/docker]\n",
                "file = /var/log/docker\n",
                "log_group_name = {cluster}\n",
                "log_stream_name = {container_instance_id}/var/log/docker\n",
                "datetime_format = %Y-%m-%dT%H:%M:%S.%f\n",
                "\n",
                "[/var/log/ecs/ecs-init.log]\n",
                "file = /var/log/ecs/ecs-init.log.*\n",
                "log_group_name = {cluster}\n",
                "log_stream_name = {container_instance_id}/var/log/ecs-init.log\n",
                "datetime_format = %Y-%m-%dT%H:%M:%SZ\n",
                "\n",
                "[/var/log/ecs/ecs-agent.log]\n",
                "file = /var/log/ecs/ecs-agent.log.*\n",
                "log_group_name = {cluster}\n",
                "log_stream_name = {container_instance_id}/var/log/ecs/ecs-agent.log\n",
                "datetime_format = %Y-%m-%dT%H:%M:%SZ\n",
                "\n",
                "[/var/log/ecs/audit.log]\n",
                "file = /var/log/ecs/audit.log.*\n",
                "log_group_name = {cluster}\n",
                "log_stream_name = {container_instance_id}/var/log/ecs/audit.log\n",
                "datetime_format = %Y-%m-%dT%H:%M:%SZ\n",
                "\n",
                "EOF\n",
                "\n",
                "--==BOUNDARY==\n",
                "MIME-Version: 1.0\n",
                "Content-Type: text/text/x-shellscript; charset=\"us-ascii\"\n",
                "#!/bin/bash\n",
                "# Set the region to send CloudWatch Logs data to (the region where the container instance is located)\n",
                "region=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone | sed s'/.$//')\n",
                "sed -i -e \"s/region = us-east-1/region = $region/g\" /etc/awslogs/awscli.conf\n",
                "\n",
                "--==BOUNDARY==\n",
                "MIME-Version: 1.0\n",
                "Content-Type: text/text/upstart-job; charset=\"us-ascii\"\n",
                "\n",
                "#upstart-job\n",
                "description \"Configure and start CloudWatch Logs agent on Amazon ECS container instance\"\n",
                "author \"Amazon Web Services\"\n",
                "start on started ecs\n",
                "\n",
                "script\n",
                "	exec 2>>/var/log/ecs/cloudwatch-logs-start.log\n",
                "	set -x\n",
                "	\n",
                "	until curl -s http://localhost:51678/v1/metadata\n",
                "	do\n",
                "		sleep 1	\n",
                "	done\n",
                "\n",
                "	# Grab the cluster and container instance ARN from instance metadata\n",
                "	cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')\n",
                "	container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )\n",
                "	\n",
                "	# Replace the cluster name and container instance ID placeholders with the actual values\n",
                "	sed -i -e \"s/{cluster}/$cluster/g\" /etc/awslogs/awslogs.conf\n",
                "	sed -i -e \"s/{container_instance_id}/$container_instance_id/g\" /etc/awslogs/awslogs.conf\n",
                "	\n",
                "	service awslogs start\n",
                "	chkconfig awslogs on\n",
                "end script\n",
                "--==BOUNDARY==--\n"
              ]
            ]
          }
        }
      }
    },

    "Cluster": {
      "Type": "AWS::ECS::Cluster"
    },

    "NginxTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [{
          "Name": "nginx",
          "Image": "jasondebolt/nginx",
          "Memory": 250,
          "Cpu": 256,
          "PortMappings": [{
            "HostPort": 80,
            "ContainerPort": 80
          }],
          "LogConfiguration" : {
            "LogDriver": "awslogs",
            "Options": {
              "awslogs-group": "nginx",
              "awslogs-region": "us-west-2"
            }
          },
          "Environment": [{"Name": "DB_HOST", "Value": {"Fn::GetAtt": ["RedisELB", "DNSName"]}}],
          "Essential": true
        }]
      }
    },

    "NginxService": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {"Ref": "Cluster"},
        "DesiredCount": {"Ref": "ClusterSize"},
        "LoadBalancers": [{
          "ContainerName": "nginx",
          "ContainerPort": 80,
          "LoadBalancerName": {"Ref": "NginxELB"}
        }],
        "Role": "ecsServiceRole",
        "TaskDefinition": {"Ref": "NginxTaskDefinition"}
      }
    },

    "RedisTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [{
          "Name": "redis",
          "Image": "redis",
          "Memory": 250,
          "Cpu": 256,
          "PortMappings": [
            {
              "HostPort": 6379,
              "ContainerPort": 6379
            }
          ],
          "Essential": true
        }]
      }
    },

    "RedisService": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {"Ref": "Cluster"},
        "DesiredCount": "1",
        "LoadBalancers": [{
          "ContainerName": "redis",
          "ContainerPort": 6379,
          "LoadBalancerName": {"Ref": "RedisELB"}
        }],
        "Role": "ecsServiceRole",
        "TaskDefinition": {"Ref": "RedisTaskDefinition"}
      }
    }

  },

  "Outputs": {
    "URL": {
      "Description": "The URL of the 'count' sample service",
      "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["NginxELB", "DNSName"]}]]}
    }
  }
}
